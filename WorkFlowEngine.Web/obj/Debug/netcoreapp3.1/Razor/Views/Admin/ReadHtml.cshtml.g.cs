#pragma checksum "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6e1cba4b065d16411a67235de91a78d1ca1d92ee"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admin_ReadHtml), @"mvc.1.0.view", @"/Views/Admin/ReadHtml.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\_ViewImports.cshtml"
using WorkFlowEngine.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\_ViewImports.cshtml"
using WorkFlowEngine.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6e1cba4b065d16411a67235de91a78d1ca1d92ee", @"/Views/Admin/ReadHtml.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a43c34278d5da81d26cb91faebd40a983864e5cd", @"/Views/_ViewImports.cshtml")]
    public class Views_Admin_ReadHtml : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("ddlDept"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("ddlTemplate"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml"
  
    ViewData["Title"] = "ReadHtml";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-12 col-sm-12"">
        <div class=""card"">
            <div class=""card-body"">
                <div class=""form-group row"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label"" for=""demo-email-input"">Department<span class=""text-danger"">*</span></label>
                    <div class=""col-12 col-md-4 col-xl-4"">
                        <span class=""colon"">:</span>
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6e1cba4b065d16411a67235de91a78d1ca1d92ee5287", async() => {
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6e1cba4b065d16411a67235de91a78d1ca1d92ee5575", async() => {
                    WriteLiteral("--Select Department--");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
#nullable restore
#line 15 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = (new SelectList(ViewBag.Department, "DEPTID", "DEPTNAME"));

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </div>
                </div>
                <div class=""form-group row"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label"" for=""demo-email-input"">Form Name<span class=""text-danger"">*</span></label>
                    <div class=""col-12 col-md-4 col-xl-4"">
                        <span class=""colon"">:</span>
                        <input type=""hidden"" id=""hdnsid"" value=""0"" />
                        <input type=""text"" id=""txtDname"" class=""form-control"" data-bind=""value: schemE_NAME"" required maxlength=""100"" style="" background-color: beige; "">
                    </div>
                </div>

                <div class=""form-group row"" id=""tbldiv"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label"" for=""demo-email-input"">Table Name<span class=""text-danger"">*</span></label>
                    <div class=""col-12 col-md-4 col-xl-4"">
                        <span class=""colon"">:</span>
                        <input type=""text");
            WriteLiteral(@""" id=""txtTname"" class=""form-control"" required maxlength=""100"" style="" background-color: beige; "">
                    </div>
                </div>
                <div class=""form-group row"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label"" for=""demo-email-input"">Icon</label>
                    <div class=""col-12 col-md-6 col-xl-4"">
                        <span class=""colon"">:</span>
                        <div class=""custom-file"">
                            <input type=""file"" class=""custom-file-input"" id=""fuUploadPocicon"">
                            <label class=""custom-file-label"" for=""customFile"" id=""fuUploadPocPrevicon"">Choose file</label>
                        </div>

                        <div class=""clearfix""></div>
                        <div><small class=""text-danger"">Max file size is 5MB Only svg allowed</small></div>
                    </div>
                </div>
                <div class=""form-group row"">
                    <label class=""co");
            WriteLiteral("l-12 col-md-2 col-xl-2 control-label\" for=\"demo-email-input\">Template<span class=\"text-danger\">*</span></label>\r\n                    <div class=\"col-12 col-md-4 col-xl-4\">\r\n                        <span class=\"colon\">:</span>\r\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6e1cba4b065d16411a67235de91a78d1ca1d92ee10665", async() => {
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6e1cba4b065d16411a67235de91a78d1ca1d92ee10954", async() => {
                    WriteLiteral("--Select Template--");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
#nullable restore
#line 53 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = (new SelectList(ViewBag.Template, "TEMPLATEID", "TEMPLATE_NAME"));

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </div>
                </div>
                <div class=""form-group row"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label"" for=""demo-email-input"">Script File</label>
                    <div class=""col-12 col-md-6 col-xl-4"">
                        <span class=""colon"">:</span>
                        <div class=""custom-file"">
                            <input type=""file"" class=""custom-file-input"" id=""fuUploadPocjs"">
                            <label class=""custom-file-label"" for=""customFile"" id=""fuUploadPocPrevjs"">Choose file</label>
                        </div>

                        <div class=""clearfix""></div>
                        <div><small class=""text-danger"">Max file size is 5MB Only .JS allowed</small></div>
                    </div>
                </div>
                <div class=""form-group row"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label"" for=""demo-email-input"">Html File</label>
              ");
            WriteLiteral(@"      <div class=""col-12 col-md-6 col-xl-4"">
                        <span class=""colon"">:</span>
                        <div class=""custom-file"">
                            <input type=""file"" class=""custom-file-input"" id=""fuUploadPoc"">
                            <label class=""custom-file-label"" for=""customFile"" id=""fuUploadPocPrev"">Choose file</label>
                        </div>

                        <div class=""clearfix""></div>
                        <div><small class=""text-danger"">Max file size is 5MB Only html allowed</small></div>
                    </div>
                </div>

                <div class=""form-group row"">
                    <label class=""col-12 col-md-2 col-xl-2 control-label""></label>
                    <div class=""col-12 col-md-6 col-xl-4"">
                        <button id=""BtnSend"" onclick=""SubmitData()"" class=""btn btn-success"">Add </button>
                        <button id=""BtnReset"" onclick=""ClearScheme()"" class=""btn btn-danger"">Reset</button>
   ");
            WriteLiteral("                 </div>\r\n                </div>\r\n                <button id=\"Btngenerate\" onclick=\"GenerateData()\" class=\"btn btn-success\" style=\"display:none;\">Generate </button>\r\n                <div id=\"divdata\"></div>\r\n");
            WriteLiteral(@"                <table id=""example"" cellspacing=""0"" class=""table table-bordered mt-4"" style=""display:none;"">
                    <thead>
                        <tr>
                            <th scope=""col"" width=""50px"">SL#</th>
                            <th style=""display:none""></th>
                            <th scope=""col"" width=""600px"">Label Name</th>
                            <th scope=""col"" width=""200px"">Display Name</th>
                        </tr>
                    </thead>
                    <tbody id=""tbltbody"">
                    </tbody>
                </table>
                <button id=""BtnSave"" onclick=""SaveData()"" class=""btn btn-success"" style=""display:none;"">Save </button>
            </div>
        </div>
    </div>
</div>


<script>
    function GenerateData() {
        const divElem = document.getElementById(""divdata"");
        const inputElements = divElem.querySelectorAll(""label,input, select, checkbox, textarea"")
        console.log(inputElements)");
            WriteLiteral(@"
        //document.getElementById(""txtTblname"").value = ""Tbl_"" + $('#fuUploadPoc')[0].files[0].name.split(""."")[0];
        document.getElementById(""tbltbody"").innerHTML = """";
        var tbody = document.getElementById(""tbltbody"");
        var Cnt = 0;
        for (var i = 0; i < inputElements.length; i++)
        {
            var Displayname = """"; var ControlType = """";
            if (inputElements[i].nodeName.toUpperCase() == ""LABEL"") {
                var tr = document.createElement('tr');
                Displayname = inputElements[i].innerText
                Cnt = Cnt + 1;
                //if (inputElements[i + 1].nodeName.toUpperCase() == ""INPUT"") {
                //    ControlType = inputElements[i + 1].attributes.type;
                //}
                //else {
                //    ControlType = inputElements[i + 1].nodeName;
                //}
                if (Displayname != """") {
                    tr.innerHTML = ""<td>"" + Cnt + ""</td>"" +
                        ""<td s");
            WriteLiteral(@"tyle='display: none'>"" + inputElements[i + 1].nodeName + ""</td>"" +
                        ""<td><input type='text' id='txtlabelname_"" + Cnt + ""' class='form-control' value='"" + inputElements[i + 1].id + ""'></td>"" +
                        ""<td><input type='text' id='txtdisplayname_"" + Cnt + ""' class='form-control' value='"" + Displayname + ""'></td>"" +
                        ""</tr>"";
                }
            }
            tbody.append(tr);
        }

    }
    function SaveData() {
        var tbody = document.getElementById(""tbltbody"");
        var jsondata = ""{  'pages': [   {    'name': 'page1',    'elements': ["";
        for (var i = 0; i < tbody.rows.length; i++) {
            if (tbody.rows[i].children.length > 0) {
                if (tbody.rows[i].children[1].innerText.toUpperCase() == ""SELECT"") {
                    jsondata = jsondata + ""{'type': 'dropdown', 'name': '"" + tbody.rows[i].children[2].innerText + ""','title': '"" + tbody.rows[i].children[3].innerText + ""', 'choices': [{");
            WriteLiteral(@" 'value': '1', 'text':'Bhubaneswar' }, { 'value': '2', 'text': 'Bangalore' }, { 'value': '3', 'text': 'Delhi' } ]},"";
                }
                else if (tbody.rows[i].children[1].innerText.toUpperCase() == ""INPUT"") {
                    jsondata = jsondata + ""{'type': 'text', 'name': '"" + tbody.rows[i].children[2].innerText + ""','title': '"" + tbody.rows[i].children[3].innerText + ""'},"";
                }
            }
        }
        jsondata = jsondata + ""]   }  ] }"";

        var fileData = new FormData(); //Creating FormData Object to fill the values entered by the  user for insert into the database
                fileData.append(""ID"", $(""#hdnsid"").val());
                fileData.append(""DEPTID"", $(""#ddlDept"").val());
                fileData.append(""SCHEME_NAME"", $(""#txtDname"").val());
            fileData.append(""TEMPLATEID"", $(""#ddlTemplate"").val());
        fileData.append(""TABLE_NAME"", $(""#txtTname"").val());
        fileData.append(""JSONSTRING"", jsondata);
                 ");
            WriteLiteral(@"   if (window.FormData !== undefined) {
                        var fileUpload = $(""#fuUploadPoc"").get(0);

                        var files = fileUpload.files;
                        if (files.length > 0) {
                            for (var i = 0; i < files.length; i++) {
                                fileData.append(files[i].name, files[i]);
                            }
                        }
                        else {
                            fileData.append(""GOAL_IMAGE"", $('#fuUploadPocPrev')[0].innerText);
                        }
                        var fileUploadjs = $(""#fuUploadPocjs"").get(0);

                        var jsFiles = fileUploadjs.files;
                        if (jsFiles.length > 0) {
                            for (var i = 0; i < jsFiles.length; i++) {
                                fileData.append(jsFiles[i].name, jsFiles[i]);
                            }
                        }
                        else {
                          ");
            WriteLiteral("  fileData.append(\"SCRIPT_FILE\", $(\'#fuUploadPocPrevjs\')[0].innerText);\r\n                        }\r\n                    }\r\n\r\n                    $.ajax({\r\n                    type: \"POST\",\r\n                    url: \'");
#nullable restore
#line 202 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml"
                     Write(Url.Action("InsertSchemethroughHtml", "Admin"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader(""XSRF-TOKEN"",
                            $('input:hidden[name=""__RequestVerificationToken""]').val());
                    },
                    data: fileData,
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    success: function (data) {
                        if (data.status == 1) {
                            bootbox.alert(""Form Inserted Successfully."");
                            BindScheme();
                            document.getElementById(""txtDname"").value = """";
                            $('#fuUploadPocPrev').text('Choose file');
                                //vm.GetSchemes(vm.selectedDep().deptid());
                        }
                        else if (data.status == 2) {
                            bootbox.alert(""Form Updated Successfully."");
                         ");
            WriteLiteral(@"   document.getElementById(""BtnSend"").innerText = ""Add"";
                            BindScheme();
                            document.getElementById(""txtDname"").value = """";
                            $('#fuUploadPocPrev').text('Choose file');
                            document.getElementById(""hdnsid"").value = ""0"";
                                //vm.GetSchemes(vm.selectedDep().deptid());
                        }
                        else if (data.status == 3) {
                            bootbox.alert(data.msg);
                            return false;
                            //document.getElementById(""BtnSend"").innerText = ""Add scheme"";
                            BindScheme();
                            document.getElementById(""txtDname"").value = """";
                                //vm.GetSchemes(vm.selectedDep().deptid());
                        }
                        //BindScheme();
                    },
                    error: function (xhr, textStatus, errorThr");
            WriteLiteral(@"own) {
                        // TODO: Show error

                    }
                });
    }
</script>
<script>
    $('#fuUploadPoc').on('change', function (e) {
        var file = $('#fuUploadPoc')[0].files[0].name;
        $('#fuUploadPocPrev').text(file);
        if (!ValidateFile('fuUploadPoc', 'Valid Document')) {
            return false;
        };
        if (!CheckFileType('fuUploadPoc', '2')) {
            return false;
        };
    });

    function ValidateFile(cntr, strText) {
        var strValue = $('#' + cntr).get(0).files.length;
        if (strValue == ""0"") {
            bootbox.alert(""Please upload "" + strText);
            $('#fuUploadPocPrev').text(""Choose File"");
            return false;
        }
        else
            return true;
    }
    function CheckFileType(cntr, ftype) {
    var userImg = '");
#nullable restore
#line 267 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml"
              Write(Url.Content("~/imgs/no_user.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
    // Get the file upload control file extension
    var extn = $('#' + cntr).val().split('.').pop().toLowerCase();
    if (extn != '') {

        // Create array with the files extensions to upload
        var fileListToUpload;
        if (parseInt(ftype) == 1)
            fileListToUpload = new Array('pdf', 'jpg', 'jpeg');
        else if (parseInt(ftype) == 2)
            fileListToUpload = new Array('html','cshtml');
        else if (parseInt(ftype) == 3)
            fileListToUpload = new Array('pdf');
        else if (parseInt(ftype) == 4)
            fileListToUpload = new Array('js');
        else
            fileListToUpload = new Array('ts');

        //Check the file extension is in the array.
        var isValidFile = $.inArray(extn, fileListToUpload);

        // isValidFile gets the value -1 if the file extension is not in the list.
        if (isValidFile == -1) {
            if (parseInt(ftype) == 1) {
                bootbox.alert('Please upload a valid document of");
            WriteLiteral(@" type pdf/jpg/jpeg!!!');
                $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                $('#' + cntr).focus();
            }
            else if (parseInt(ftype) == 2) {
                bootbox.alert('Please upload a valid html/cshtml document.!!!');
                $('#fuUploadPocPrev').text(""Choose file"");
                $('#showPhoto').attr('src', userImg);
                $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                $('#' + cntr).focus()
            }
            else if (parseInt(ftype) == 3) {
                bootbox.alert(""<strong>Please upload a valid pdf file</strong>"");
                $('#fuUploadPocPrev').text(""Choose File"");
                $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                $('#' + cntr).focus();
            }
            else if (parseInt(ftype) == 4) {
                bootbox.alert(""<strong>Please upload a valid js file</strong>"");
                $('#fuUploadPocPrevjs");
            WriteLiteral(@"').text(""Choose File"");
                $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                $('#' + cntr).focus();
            }
            else {
                bootbox.alert('Please Upload a valid document !!!');
                $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                $('label[id*=""' + cntr + '""]').text('');
                $('#' + cntr).focus();
            }
        }
        else {
            // Restrict the file size to 2MB(1024 * 5120;)
            if (parseInt(ftype) == 4) {
                if ($('#' + cntr).get(0).files[0].size > (5242880)) {
                    bootbox.alert(""<strong>Proceeding file size should not exceed 5MB.!!!</strong>"");
                    $('#fuUploadPocPrevjs').text(""Choose File"");
                    $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                    $('#' + cntr).focus();
                }
                if ($('#' + cntr).get(0).files[0].name.length > 100) ");
            WriteLiteral(@"{
                    bootbox.alert(""<strong>Proceeding file Name should be maximum 100 Characters!</strong>"");
                    $('#fuUploadPocPrevjs').text(""Choose File"");
                    $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                    $('label[id*=""' + cntr + '""]').text('');
                    $('#' + cntr).focus();
                }
                else
                    return true;
            }
            else {
                if ($('#' + cntr).get(0).files[0].size > (5242880)) {
                    bootbox.alert(""<strong>Proceeding file size should not exceed 5MB.!!!</strong>"");
                    $('#fuUploadPocPrev').text(""Choose File"");
                    $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                    $('#' + cntr).focus();
                }
                if ($('#' + cntr).get(0).files[0].name.length > 100) {
                    bootbox.alert(""<strong>Proceeding file Name should be maximum 100 Cha");
            WriteLiteral(@"racters!</strong>"");
                    $('#fuUploadPocPrev').text(""Choose File"");
                    $('#' + cntr).replaceWith($('#' + cntr).val('').clone(true));
                    $('label[id*=""' + cntr + '""]').text('');
                    $('#' + cntr).focus();
                }
                else
                    return true;
            }

        }
    }
    else
        return true;
    }
    function SubmitData() {
        if ($('#ddlDept').val() == """") {
            bootbox.alert(""Please Select Department!"");
            $('#ddlDept').focus();
            return false;
        }
        else if ($('#txtDname').val() == """") {
            bootbox.alert(""Please enter Form Name!"");
            return false;
            $('#txtDname').focus();
        }
        else if ($('#ddlTemplate').val() == ""0"") {
            bootbox.alert(""Please choose Template!"");
            return false;
            $('#ddlTemplate').focus();
        }
        if ($('#txtTname').val() ==");
            WriteLiteral(@" """") {
            bootbox.alert(""Please enter Table Name!"");
            return false;
            $('#txtTname').focus();
        }
        else {
            var fileData = new FormData();

            if (window.FormData !== undefined) {
                var fileUpload = $(""#fuUploadPoc"").get(0);

                var files = fileUpload.files;
                if (files.length > 0) {
                    for (var i = 0; i < files.length; i++) {
                        fileData.append(files[i].name, files[i]);
                    }
                }
                else {
                    fileData.append(""GOAL_IMAGE"", $('#fuUploadPocPrev')[0].innerText);
                }
            }

            $.ajax({
                type: ""POST"",
                url: '");
#nullable restore
#line 403 "D:\Projects\WFEWorkFlowEngine2023\WorkFlowEngine.Web\Views\Admin\ReadHtml.cshtml"
                 Write(Url.Action("ReadHtmlControl", "Admin"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                data: fileData,
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                success: function (data) {
                    //$(""#htmliframe"").show();
                    //$(""#htmliframe"").prop(""src"", ""/SchemeDocuments/"" + data.fullname);
                    $(""#divdata"").load(""/SchemeDocuments/"" + data.fullname);
                    document.getElementById(""Btngenerate"").style.display = ""block"";
                   // document.getElementById(""divtbl"").style.display = ""block"";
                    document.getElementById(""example"").style.display = ""block"";
                    document.getElementById(""BtnSave"").style.display = ""block"";
                },
                error: function (xhr, te");
            WriteLiteral("xtStatus, errorThrown) {\r\n                    // TODO: Show error\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
